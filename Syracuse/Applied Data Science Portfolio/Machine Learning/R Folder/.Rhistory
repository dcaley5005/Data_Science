tree <- predict(tree.model, test)
prediction <- data.frame(cbind(prediction,tree))
# Prediction on the test data using svm
svm <- predict(svm.model, test)
prediction <- data.frame(cbind(prediction, svm))
# Prediction on the test data using knn
knn <- predict(knn.model, test)
prediction <- data.frame(cbind(prediction, knn))
# Prediction on the test data using random forest
random_f <- predict(rf.model, test)
prediction <- data.frame(cbind(prediction, random_f))
head(prediction)
test_results <- RMSE %>% mutate(results = "Train") %>% relocate(results, .before = svm_rmse)
train_results <- prediction %>% summarise(
results = "Test",
svm_rmse = sqrt(mean((Imdb.Score - svm)^2)),
knn_rmse = sqrt(mean(Imdb.Score - knn)^2),
tree_rmse = sqrt(mean((Imdb.Score - tree)^2)),
rf_rmse = sqrt(mean((Imdb.Score - random_f)^2))
)
test_results %>% union_all(train_results)
FlixGenre <- CleanFlix %>% dplyr::select(Genres)
FlixGenreRows <- FlixGenre %>% mutate(Genres2 = strsplit(Genres,", ")) %>% unnest(Genres2)
FlixGenre <- separate(FlixGenre, "Genres", paste("Genres", 1:3, sep = "_"), sep = ",", extra = "drop") %>%
mutate(across(contains("Genres"), ~ as.factor(.)))
write_csv(FlixGenre, "FlixGenre.csv")
GenreTransactions <- read.transactions("FlixGenre.csv", format = "basket", sep=",", skip = 1)
inspect(GenreTransactions[1:20])
View(ClassFlix)
sapply(ClassFlix[,6991:6992], sum)
barplot(sapply(ClassFlix[,6991:6992], sum) / row_count, main = "Test & Training IMDB")
ggplot(CleanFlix) +
aes(x = Rating, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightblue", color = "black") +
theme_minimal()
ggplot(CleanFlix) +
aes(x = Duration_bins, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightgreen", color = "black") +
theme_minimal()
CleanFlix %>% mutate(region_type = if_else(internation_flag == FALSE,"Domestic","International")) %>%
ggplot(aes(x = `Imdb Score`)) +
geom_histogram(bins = 30L, fill = "magenta", color = "black") +
theme_minimal() +
facet_wrap(vars(region_type))
ggplot(CleanFlix) +
aes(x = Rating, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightblue", color = "black") +
theme_minimal() +
labs(
title = "Boxplot Rating"
)
CleanFlix %>% mutate(region_type = if_else(internation_flag == FALSE,"Domestic","International")) %>%
ggplot(aes(x = `Imdb Score`)) +
geom_histogram(bins = 30L, fill = "magenta", color = "black") +
theme_minimal() +
facet_wrap(vars(region_type))
CleanFlix %>% mutate(region_type = if_else(internation_flag == FALSE,"Domestic","International")) %>%
ggplot(aes(x = `Imdb Score`)) +
geom_histogram(bins = 30L, fill = "magenta", color = "black") +
theme_minimal() +
facet_wrap(vars(region_type)) +
labs(
ylab = "Count"
)
ggplot(CleanFlix) +
aes(x = Rating, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightblue", color = "black") +
theme_minimal() +
labs(
title = "Boxplot Rating"
)
ggplot(CleanFlix) +
aes(x = Duration_bins, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightgreen", color = "black") +
theme_minimal() +
labs(
title = "Duration Bins"
)
CleanFlix %>% mutate(region_type = if_else(internation_flag == FALSE,"Domestic","International")) %>%
ggplot(aes(x = `Imdb Score`)) +
geom_histogram(bins = 30L, fill = "magenta", color = "black") +
theme_minimal() +
facet_wrap(vars(region_type)) +
labs(
ylab = "Count"
)
CleanFlix %>% mutate(region_type = if_else(internation_flag == FALSE,"Domestic","International")) %>%
ggplot(aes(x = `Imdb Score`)) +
geom_histogram(bins = 30L, fill = "magenta", color = "black") +
theme_minimal() +
facet_wrap(vars(region_type)) +
ylabs("Count")
CleanFlix %>% mutate(region_type = if_else(internation_flag == FALSE,"Domestic","International")) %>%
ggplot(aes(x = `Imdb Score`)) +
geom_histogram(bins = 30L, fill = "magenta", color = "black") +
theme_minimal() +
facet_wrap(vars(region_type)) +
ylab("Count")
ggplot(CleanFlix) +
aes(x = Rating, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightblue", color = "black") +
theme_minimal() +
labs(
title = "Boxplot Rating"
)
ggplot(CleanFlix) +
aes(x = Duration_bins, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightgreen", color = "black") +
theme_minimal() +
labs(
title = "Duration Bins"
)
CleanFlix %>% mutate(region_type = if_else(internation_flag == FALSE,"Domestic","International")) %>%
ggplot(aes(x = `Imdb Score`)) +
geom_histogram(bins = 30L, fill = "magenta", color = "black") +
theme_minimal() +
facet_wrap(vars(region_type)) +
ylab("Count")
library(tidyverse)
library(dplyr)
library(data.table)
library(tm)
library(cluster)
library(ggplot2)
library(ggfortify)
library(plyr)
# Needed to introduce tuning parameters for machine learning
library(caret) # Machine Learning
library(caretEnsemble) # To ensemble predictions
library(questionr)# Required run Naive in caret
library(klaR) # Required for Naive Bayes in caret
library(e1071) # Required for Naive Bayes faster
# Needed for Decision tree model and plot
library(rpart) # decision tree
library(rpart.plot) # used for model plot
library(rattle) # used for model plot
library(arules) # used for association rule
library(arulesViz) # used for association rule
MyNetflix <- read_csv("data/netflixData.csv")
CleanFlix <- MyNetflix %>% filter(
`Production Country` %like% "United States" &
`Content Type` == "Movie" &
Director != "" &
Cast != ""
) %>%
mutate(
`Imdb Score` = as.numeric(str_remove(`Imdb Score`,"/10")),
Duration = as.numeric((str_remove(Duration, " min"))),
Duration_bins = as.ordered(ceiling(Duration / 30) * 30),
internation_flag = str_count(`Production Country`) != 13
) %>% dplyr::select(-`Date Added`)
## Cleaning the Ratings
CleanFlix <- CleanFlix %>% dplyr::mutate(
Rating = str_remove(Rating,"TV-"),
Rating = case_when(Rating == "Y" ~ "G",
Rating == "Y7" ~ "PG",
Rating == "14" ~ "PG-13",
Rating == "MA" ~ "R",
TRUE ~ Rating)
) %>% filter(!is.na(`Imdb Score`))
str(CleanFlix)
CleanFlix %>% ggplot() +
aes(x = Rating) +
geom_bar(fill = "Salmon", color = "Black") +
theme_minimal() +
ylab("Count")
print(paste0("Total Number of R Movies: ", sum(CleanFlix$Rating == "R")))
print(paste0("Total Number of PG-13 Movies: ", sum(CleanFlix$Rating == "PG-13")))
print(paste0("Total Number of PG Movies: ", sum(CleanFlix$Rating == "PG")))
print(paste0("Total Number of G Movies: ", sum(CleanFlix$Rating == "G")))
ggplot(CleanFlix) +
aes(x = Duration) +
geom_histogram(bins = 30L, fill = "Salmon", color = "Black") +
theme_minimal() +
ylab("Count") +
geom_vline(aes(xintercept=mean(Duration)), col="Blue")
print(paste0("Average Duration in Minutes: ", mean(CleanFlix$Duration)))
vlinedata <- ddply(CleanFlix, "Rating", summarize, DurationMean=mean(Duration))
ggplot(CleanFlix) +
aes(x = Duration) +
geom_histogram(bins = 30L, fill = "Salmon", color = "Black") +
theme_minimal() +
facet_wrap(vars(Rating)) +
geom_vline(aes(xintercept=DurationMean),  vlinedata, col="Blue") +
ylab("Count") +
ggtitle("Duration Split by Rating")
print(paste0("Mean Duration for R Movies: ", mean(CleanFlix$Duration[CleanFlix$Rating=="R"])))
print(paste0("Mean Duration for PG-13 Movies: ", mean(CleanFlix$Duration[CleanFlix$Rating=="PG-13"])))
print(paste0("Mean Duration for PG Movies: ", mean(CleanFlix$Duration[CleanFlix$Rating=="PG"])))
print(paste0("Mean Duration for G Movies: ", mean(CleanFlix$Duration[CleanFlix$Rating=="G"])))
ggplot(CleanFlix) +
aes(x = `Imdb Score`) +
geom_histogram(bins = 30L, fill = "Salmon", color = "Black") +
theme_minimal() +
ylab("Count") +
ggtitle("IMDb Score") +
geom_vline(aes(xintercept=mean(`Imdb Score`)), col="Blue")
print(paste0("Average IMDb Score: ", mean(CleanFlix$`Imdb Score`)))
vlinedata <- ddply(CleanFlix, "Rating", summarize, ScoreMean=mean(`Imdb Score`))
ggplot(CleanFlix) +
aes(x = `Imdb Score`) +
geom_histogram(bins = 30L, fill = "Salmon", color = "Black") +
theme_minimal() +
facet_wrap(vars(Rating)) +
geom_vline(aes(xintercept=ScoreMean),  vlinedata, col="Blue") +
ylab("Count") +
ggtitle("IMDb Score Split by Rating")
print(paste0("Mean IMDb Score for R Movies: ", mean(CleanFlix$`Imdb Score`[CleanFlix$Rating=="R"])))
print(paste0("Mean IMDb Score for PG-13 Movies: ", mean(CleanFlix$`Imdb Score`[CleanFlix$Rating=="PG-13"])))
print(paste0("Mean IMDb Score for PG Movies: ", mean(CleanFlix$`Imdb Score`[CleanFlix$Rating=="PG"])))
print(paste0("Mean IMDb Score for G Movies: ", mean(CleanFlix$`Imdb Score`[CleanFlix$Rating=="G"])))
NetflixCluster <- CleanFlix %>% dplyr::select(Description)
row.names(NetflixCluster) <- CleanFlix$`Show Id`
myCorpus <- Corpus(VectorSource(NetflixCluster$Description))
STOPS <- stopwords('english')
MyStopwords <- c()
RemoveSpecialChars <- function(x) gsub("[^a-zA-Z0-9 ]","",x)
myCorpus <- tm_map(myCorpus, RemoveSpecialChars)
myCorpus <- tm_map(myCorpus, removePunctuation)
myCorpus <- tm_map(myCorpus, removeNumbers)
myCorpus <- tm_map(myCorpus, tolower)
myCorpus <- tm_map(myCorpus, removeWords, stopwords("english"))
myCorpus <- tm_map(myCorpus, stripWhitespace)
myCorpus <- tm_map(myCorpus, removeWords, MyStopwords)
dtm <- DocumentTermMatrix(myCorpus)
Netflix_DTM <- as.matrix(dtm)
# Vectorization
# Look at word frequencies
WordFreq <- colSums(as.matrix(Netflix_DTM))
(head(WordFreq, 10))
(length(WordFreq))
ord <- order(desc(WordFreq))
# Looking at the most common and least common words
MostCommon <- WordFreq[head(ord, 10)]
LeastCommon <- WordFreq[tail(ord, 50)]
# Creating a barplot for the top 20 words
barplot(head(sort(WordFreq, decreasing = TRUE),10), main = "Ten Most Common Words")
#barplot(head(sort(WordFreq, decreasing = FALSE),20), main = "Twenty Least Common Words")
## Row Sums per Fed Papers
Row_Sum_Per_doc <- rowSums(Netflix_DTM)
print(paste0("Avergae Number of Words Per Description: ", floor(mean(Row_Sum_Per_doc))))
# Create a normalized version
NetflixNormalized <- as.matrix(Netflix_DTM)
NetflixNormalized_N1 <- apply(NetflixNormalized, 1, function(i) round(i/sum(i),3))
Netflix_Matrix_Norm <- t(NetflixNormalized_N1)
Netflix_Matrix_Norm = as.matrix(Netflix_DTM)
Netflix_Norm_DF <- as.data.frame(as.matrix(Netflix_Matrix_Norm))
row.names(Netflix_Norm_DF) <- CleanFlix$`Show Id`
Netflix_Norm_DF_Freq <- Netflix_Norm_DF / length(colSums(as.matrix(Netflix_DTM)))
# Set seed for fixed random seed
set.seed(73)
# Creating the number of clusters
cluster_loop <- c(2:20)
# Creating data frame to store cluster stats
Best_Cluster <- data.frame()
x <-  2
# Looping through the cluster number loop to find the best number of clusters
for (x in cluster_loop){
# Run kmeans function with each cluster number
Netflix_Norm_DF_Freq <- Netflix_Norm_DF / length(colSums(as.matrix(Netflix_DTM)))
Clusters <- kmeans(Netflix_Norm_DF_Freq, x)
# Set the Cluster as a variable in the data frame
Netflix_Norm_DF_Freq$Clusters <- as.factor(Clusters$cluster)
Cohesion_Clus <- Clusters$tot.withinss
Separation_Clus <- Clusters$betweenss
data_frame <- data.frame("Number" = x, "Cohesion" = Cohesion_Clus, "Separation" = Separation_Clus)
Best_Cluster <- rbind(Best_Cluster, data_frame)
# Convert all columns to numeric in order to plot using pcom
#Netflix_Norm_DF_Freq <- sapply(Netflix_Norm_DF_Freq, as.numeric)
# print(paste0("Completed Cluster: ", x))
}
# Finding best number of clusters
BestCluster <- data.frame(Best_Cluster$Number, Best_Cluster$Cohesion, Best_Cluster$Separation)
colnames(BestCluster) <- c("Number", "Cohesion", "Separation")
BestCluster$ScaleCohesion <- scale(BestCluster$Cohesion)
BestCluster$ScaleSeparation <- scale(BestCluster$Separation)
BestCluster$Combined <- (BestCluster$ScaleCohesion + BestCluster$ScaleSeparation)
BestCluster[head(order(-BestCluster$Combined), 5),]
# Set seed for fixed random seed
set.seed(73)
# Run k-means with 6 clusters
x <- 6
Clusters <- kmeans(Netflix_Norm_DF_Freq, x)
# Filling data frame with movies
ClusterFlix <- CleanFlix
# Adding cluster to original data frame
ClusterFlix$Clusters <- as.factor(Clusters$cluster)
# Adding Cluster to the frequency data frame
Netflix_Norm_DF_Freq <- Netflix_Norm_DF / length(colSums(as.matrix(Netflix_DTM)))
Netflix_Norm_DF_Freq$Clusters <- as.factor(Clusters$cluster)
# Plots
Netflix_Norm_DF_Freq <- sapply(Netflix_Norm_DF_Freq, as.numeric)
plot_title <- paste0("Cluster ",x)
pcom <- prcomp(Netflix_Norm_DF_Freq, scale. = TRUE)
ggplot2::autoplot(pcom, data = Netflix_Norm_DF_Freq, colour = 'Clusters', frame = TRUE, frame.type = 'norm') +
ggtitle(plot_title)
ggplot(data=ClusterFlix, aes(x=Rating, fill=Clusters))+
geom_bar(stat="count") +
labs(title = "Comparing Different Clusters") +
theme(plot.title = element_text(hjust=0.5), text=element_text(size=15))
ggplot(data=ClusterFlix, aes(x=`Imdb Score`, fill=Clusters))+
geom_bar(stat="count") +
labs(title = "Comparing Different Clusters") +
theme(plot.title = element_text(hjust=0.5), text=element_text(size=15))
ClassFlix <- data.frame(Netflix_Norm_DF_Freq)
rownames(ClassFlix) <- CleanFlix$`Show Id`
ClassFlix$Rating <- CleanFlix$Rating
row_count <- nrow(ClassFlix)
ClassFlix <- ClassFlix %>% dplyr::mutate(
random_seed = runif(row_count,1, 100) / 100,
model_group = if_else(random_seed<= 0.50, "ClassTrain","ClassTest"),
Train = model_group == "ClassTrain",
Test = model_group == "ClassTest",
)
sapply(ClassFlix[,6991:6992], sum)
barplot(sapply(ClassFlix[,6991:6992], sum) / row_count, main = "Test & Training IMDB")
TrainClassFlix <- ClassFlix[ClassFlix$Train==TRUE,]
TrainClassFlix <- TrainClassFlix[ , -which(names(TrainClassFlix) %in% c("Train","Test", "random_seed", "model_group", "Clusters"))]
TestClassFlix <- ClassFlix[ClassFlix$Test==TRUE,]
TestClassFlix <- TestClassFlix[ , -which(names(TestClassFlix) %in% c("Train","Test", "random_seed", "model_group", "Clusters"))]
# Train Tree Model 1
set.seed(73)
TreeFlix <- rpart(Rating ~ ., data = TrainClassFlix, method="class", control=rpart.control(cp=0, maxdepth = 5))
ClassPredicted <- predict(TreeFlix, TestClassFlix, type="class")
ClassFlixResults <- data.frame(Actual=TestClassFlix$Rating, TrainTreeModel1 = ClassPredicted)
# Plot number of splits
rsq.rpart(TreeFlix)
# Plot the decision tree
fancyRpartPlot(TreeFlix,palettes=c("Blues", "Reds"), main="Rating Decision Tree", sub = "")
#confusion matrix to find correct and incorrect predictions
ClassTable <- table(Rating=ClassPredicted, true=TestClassFlix$Rating)
ClassTable
print(paste0("Correct Ratings: ", sum(diag(ClassTable))/sum(ClassTable)))
print(paste0("Incorrect Ratings: ", 1 - sum(diag(ClassTable))/sum(ClassTable)))
ggplot(CleanFlix) +
aes(x = Rating, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightblue", color = "black") +
theme_minimal() +
labs(
title = "Boxplot Rating"
)
ggplot(CleanFlix) +
aes(x = Duration_bins, y = `Imdb Score`) +
geom_boxplot(shape = "circle", fill = "lightgreen", color = "black") +
theme_minimal() +
labs(
title = "Duration Bins"
)
CleanFlix %>% mutate(region_type = if_else(internation_flag == FALSE,"Domestic","International")) %>%
ggplot(aes(x = `Imdb Score`)) +
geom_histogram(bins = 30L, fill = "magenta", color = "black") +
theme_minimal() +
facet_wrap(vars(region_type)) +
ylab("Count")
set.seed(73)
row_count <- nrow(CleanFlix)
## Add a column with random number
ModelFlix <- CleanFlix
rownames(ModelFlix) <- ModelFlix$`Show Id`
ModelFlix <- ModelFlix %>% mutate(
random_seed = runif(row_count,1, 100) / 100,
model_group = if_else(random_seed<= 0.50, "Train","Test"),
Train = model_group == "Train",
Test = model_group == "Test",
) %>% dplyr::select(model_group,Train, Test, `Imdb Score`, Rating, Duration_bins, internation_flag,
Genres, Director, Cast)
sapply(ModelFlix[,2:3], sum)
barplot(sapply(ModelFlix[,2:3], sum) / row_count, main = "Test & Training IMDB")
train <- ModelFlix %>% filter(model_group=="Train") %>%  dplyr::select(`Imdb Score`, Rating, Duration_bins, internation_flag, Director, Genres)
# Creating a control with cross validation of 3
control <- trainControl(method ='cv',number = 3)
# Metric for comparison will be accuracy for this project
# metric <-  "Accuracy"
# Decision Tree
tree.model <- train(`Imdb Score` ~ ., data = train, method="rpart",  trControl=control,
tuneLength = 3)
# Support Vector Machine (SVM)
svm.model <- train(`Imdb Score` ~ ., data = train, method="svmRadial",trControl=control,
tuneLength = 3)
# kNN
knn.model <- train(`Imdb Score` ~ ., data = train, method="knn",  trControl=control,
tuneLength = 3)
# Random Forest
rf.model <- train(`Imdb Score` ~ ., data = train, method="rf",  trControl=control,
tuneLength = 3)
# summarize accuracy of models
results <- resamples(list(Decesion_Tree=tree.model,
knn=knn.model,
SVM=svm.model,Random_Forest=rf.model))
summary(results)
dotplot(results)
train <- ModelFlix %>% filter(model_group=="Train") %>%  dplyr::select(`Imdb Score`, Rating, Duration_bins, internation_flag)
# Creating a control with cross validation of 3
control <- trainControl(method ='cv',number = 3)
# Metric for comparison will be accuracy for this project
# metric <-  "Accuracy"
# Decision Tree
tree.model <- train(`Imdb Score` ~ ., data = train, method="rpart",  trControl=control,
tuneLength = 3)
# Support Vector Machine (SVM)
svm.model <- train(`Imdb Score` ~ ., data = train, method="svmRadial",trControl=control,
tuneLength = 3)
# kNN
knn.model <- train(`Imdb Score` ~ ., data = train, method="knn",  trControl=control,
tuneLength = 3)
# Random Forest
rf.model <- train(`Imdb Score` ~ ., data = train, method="rf",  trControl=control,
tuneLength = 3)
# summarize accuracy of models
results <- resamples(list(Decesion_Tree=tree.model,
knn=knn.model,
SVM=svm.model,Random_Forest=rf.model))
summary(results)
dotplot(results)
test <- ModelFlix %>% filter(model_group=="Test") %>% dplyr::select(`Imdb Score`, Rating, Duration_bins, internation_flag)
svm.model
plot(svm.model)
svm_rsq <- mean(svm.model$resample$Rsquared)
svm_rmse <- mean(svm.model$resample$RMSE)
Rsquared <- data.frame(svm_rsq)
RMSE <- data.frame(svm_rmse)
knn.model
plot(knn.model)
knn_rsq <- mean(knn.model$resample$Rsquared)
knn_rmse <- mean(knn.model$resample$RMSE)
Rsquared <- data.frame(cbind(Rsquared, knn_rsq))
RMSE <- data.frame(cbind(RMSE,knn_rmse))
tree.model
plot(tree.model)
tree_rsq <- mean(tree.model$resample$Rsquared)
tree_rmse <- mean(tree.model$resample$RMSE)
Rsquared <- data.frame(cbind(Rsquared, tree_rsq))
RMSE <- data.frame(cbind(RMSE,tree_rmse))
rf.model
plot(rf.model)
rf_rsq <- mean(rf.model$resample$Rsquared)
rf_rmse <- mean(rf.model$resample$RMSE)
Rsquared <- data.frame(cbind(Rsquared, rf_rsq))
RMSE <- data.frame(cbind(RMSE,rf_rmse))
Rsquared
RMSE
# The code above and graphics displays the summary of the model just created in
# the process. It is important to note and find the final model that is selected
# which has the highest accuracy.To do so in random forest model out of 3 fold,
# one needs to check which value of mtry that yielded the most accuracy, in this
# example it was mtry = 39.However as the mtry is increased the accuracy of the
# model seems to go down.
# The random forest algorithm selects the random label and creates the tree of
# it's own. The final model is the one that yields the highest accuracy. Mtry is
# the number associated with that specific tree.
# Actual
prediction <- test %>% dplyr::select(`Imdb Score`)
# Prediction on the test data using decision tree
tree <- predict(tree.model, test)
prediction <- data.frame(cbind(prediction,tree))
# Prediction on the test data using svm
svm <- predict(svm.model, test)
prediction <- data.frame(cbind(prediction, svm))
# Prediction on the test data using knn
knn <- predict(knn.model, test)
prediction <- data.frame(cbind(prediction, knn))
# Prediction on the test data using random forest
random_f <- predict(rf.model, test)
prediction <- data.frame(cbind(prediction, random_f))
head(prediction)
test_results <- RMSE %>% mutate(results = "Train") %>% relocate(results, .before = svm_rmse)
train_results <- prediction %>% summarise(
results = "Test",
svm_rmse = sqrt(mean((Imdb.Score - svm)^2)),
knn_rmse = sqrt(mean(Imdb.Score - knn)^2),
tree_rmse = sqrt(mean((Imdb.Score - tree)^2)),
rf_rmse = sqrt(mean((Imdb.Score - random_f)^2))
)
test_results %>% union_all(train_results)
FlixGenre <- CleanFlix %>% dplyr::select(Genres)
FlixGenreRows <- FlixGenre %>% mutate(Genres2 = strsplit(Genres,", ")) %>% unnest(Genres2)
FlixGenre <- separate(FlixGenre, "Genres", paste("Genres", 1:3, sep = "_"), sep = ",", extra = "drop") %>%
mutate(across(contains("Genres"), ~ as.factor(.)))
write_csv(FlixGenre, "FlixGenre.csv")
GenreTransactions <- read.transactions("FlixGenre.csv", format = "basket", sep=",", skip = 1)
inspect(GenreTransactions[1:20])
FlixGenre <- CleanFlix %>% dplyr::select(Genres)
FlixGenreRows <- FlixGenre %>% mutate(Genres2 = strsplit(Genres,", ")) %>% unnest(Genres2)
FlixGenre <- separate(FlixGenre, "Genres", paste("Genres", 1:3, sep = "_"), sep = ",", extra = "drop") %>%
mutate(across(contains("Genres"), ~ as.factor(.)))
write_csv(FlixGenre, "FlixGenre.csv")
GenreTransactions <- read.transactions("FlixGenre.csv", format = "basket", sep=",", skip = 1)
inspect(GenreTransactions[1:20])
arules::inspect(GenreTransactions[1:20])
# Create an item frequency plot for the top 20 items
itemFrequencyPlot(GenreTransactions,topN=20,type="absolute")
FlixGenre <- CleanFlix %>% dplyr::select(Genres)
FlixGenreRows <- FlixGenre %>% mutate(Genres2 = strsplit(Genres,", ")) %>% unnest(Genres2)
FlixGenre <- separate(FlixGenre, "Genres", paste("Genres", 1:3, sep = "_"), sep = ",", extra = "drop") %>%
mutate(across(contains("Genres"), ~ as.factor(.)))
write_csv(FlixGenre, "FlixGenre.csv")
GenreTransactions <- read.transactions("FlixGenre.csv", format = "basket", sep=",", skip = 1)
arules::inspect(GenreTransactions[1:20])
# Create an item frequency plot for the top 20 items
itemFrequencyPlot(GenreTransactions,topN=20,type="absolute")
# generate rules
# Dan why did you set the support, confidence, and maxlen as these values.
rules <- apriori(GenreTransactions,  parameter = list(supp = 0.001, conf = 0.8))
# Rounding rules to 2 digits
options(digits=2)
# get summary info about all rules
summary(rules)
# sort the rules to view most relevant first (confidence)
rules <- sort(rules, by="confidence", decreasing=TRUE)
inspect(rules)
plot(rules,method="graph",shading=NA)
arules::inspect(rules)
