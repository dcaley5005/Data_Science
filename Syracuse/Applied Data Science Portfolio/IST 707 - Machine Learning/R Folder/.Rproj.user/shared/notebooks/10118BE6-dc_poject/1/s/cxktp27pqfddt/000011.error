{"frames":[{"func":"CleanFlix %>% mutate(Rating = str_remove(Rating, \"TV-\"), Rating = case_when(Rating == \n    \"Y\" ~ \"G\", Rating == \"Y7\" ~ \"PG\", Rating == \"14\" ~ \"PG-13\", \n    Rating == \"MA\" ~ \"R\", Rating))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate(., Rating = str_remove(Rating, \"TV-\"), Rating = case_when(Rating == \n    \"Y\" ~ \"G\", Rating == \"Y7\" ~ \"PG\", Rating == \"14\" ~ \"PG-13\", \n    Rating == \"MA\" ~ \"R\", Rating))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate.data.frame(., Rating = str_remove(Rating, \"TV-\"), Rating = case_when(Rating == \n    \"Y\" ~ \"G\", Rating == \"Y7\" ~ \"PG\", Rating == \"14\" ~ \"PG-13\", \n    Rating == \"MA\" ~ \"R\", Rating))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate_cols(.data, ..., caller_env = caller_env())","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers({\n    for (i in seq_along(dots)) {\n        mask$across_cache_reset()\n        context_poke(\"column\", old_current_column) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mask$eval_all_mutate(quo)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"case_when(Rating == \"Y\" ~ \"G\", Rating == \"Y7\" ~ \"PG\", Rating == \n    \"14\" ~ \"PG-13\", Rating == \"MA\" ~ \"R\", Rating)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"map2(fs, seq_along(fs), validate_formula, default_env, current_env())","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mapply(.f, .x, .y, MoreArgs = list(...), SIMPLIFY = FALSE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (x, i, default_env, dots_env) \n{\n    if (is_quosure(x)) {\n        default_env <- quo_get_env(x) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort_case_when_formula(arg, i, x)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(glue(\"Case {i} ({deparsed}) must be a two-sided formula, not {type}.\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signalCondition(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (e) \n{\n    local_call_step(dots = dots, .index = i, .fn = \"mutate\", \n        .dot_data = inherits(e, \"rlang_error_data_pronoun_not_found\")) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(bullets, class = c(\"dplyr:::mutate_error\", \"dplyr_error\"), \n    error_name = error_name, error_expression = error_expression, \n    parent = e, bullets = bullets)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error: Problem with `mutate()` column `Rating`.\n\u001B[34mâ„¹\u001B[39m `Rating = case_when(...)`.\n\u001B[31mx\u001B[39m Case 5 (`Rating == \"Y\" ~ \"G\"`) must be a two-sided formula, not a character vector.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n"}